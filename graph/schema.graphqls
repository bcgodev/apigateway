schema {
  query: Query
  mutation: Mutation
}

type ArchiveAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type CreateMember {
  member: MemberType
  success: Boolean
  msg: String
}

enum CustomUserGender {
  A_1
  A_2
  A_0
}

scalar Date

scalar DateTime

type DeleteMember {
  success: Boolean
}

scalar ExpectedErrorType

scalar GenericScalar

type MemberType {
  id: ID!
  lastLogin: DateTime
  username: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  firebaseId: String
  nickname: String
  name: String
  gender: CustomUserGender!
  phone: String
  birthday: Date!
  address: String
  profileImage: String
  profile: ProfileType
  password: String!
  isSuperuser: Boolean!
}

type Mutation {
  profile: ProfileType
  member: MemberType
  createMember(email: String!, firebaseId: String!, nickname: String): CreateMember
  updateMember(address: String, birthday: Date, firebaseId: String!, gender: Int, name: String, nickname: String, phone: String, profileImage: String): UpdateMember
  deleteMember(firebaseId: String!): DeleteMember
  verifyMember(token: String!): VerifyAccount
  archiveAccount(password: String!): ArchiveAccount
  sendSecondaryEmailActivation(email: String!, password: String!): SendSecondaryEmailActivation
  verifySecondaryEmail(token: String!): VerifySecondaryEmail
  swapEmails(password: String!): SwapEmails
  tokenAuth(password: String!, email: String, username: String): ObtainJSONWebToken
  verifyToken(token: String!): VerifyToken
  refreshToken(refreshToken: String!): RefreshToken
  revokeToken(refreshToken: String!): RevokeToken
}

interface Node {
  id: ID!
}

type ObtainJSONWebToken {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  refreshToken: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProfileType {
  user: MemberType!
  bio: String!
  phoneNumber: String!
}

type Query {
  allProfile: [ProfileType]
  me: UserNode
  user(id: ID!): UserNode
  users(before: String, after: String, first: Int, last: Int, email: String, username: String, username_Icontains: String, username_Istartswith: String, isActive: Boolean, status_Archived: Boolean, status_Verified: Boolean, status_SecondaryEmail: String): UserNodeConnection
}

type RefreshToken {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
}

type RevokeToken {
  revoked: Int
  success: Boolean
  errors: ExpectedErrorType
}

type SendSecondaryEmailActivation {
  success: Boolean
  errors: ExpectedErrorType
}

type SwapEmails {
  success: Boolean
  errors: ExpectedErrorType
}

type UpdateMember {
  member: MemberType
  success: Boolean
}

type UserNode implements Node {
  id: ID!
  lastLogin: DateTime
  username: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  firebaseId: String
  nickname: String
  name: String
  gender: CustomUserGender!
  phone: String
  birthday: Date!
  address: String
  profileImage: String
  profile: ProfileType
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]!
}

type UserNodeEdge {
  node: UserNode
  cursor: String!
}

type VerifyAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifySecondaryEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifyToken {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
}
